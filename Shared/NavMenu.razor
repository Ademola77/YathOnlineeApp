@using YathOnline.Models
@using YathOnline.Models.Dtos
@using YathOnline.Web.Services.Contracts
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">YathOnline.Web</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>



<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
@*        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> FetchData
            </NavLink>
        </div>*@

        @if (ProductCategoryItems.Data == null)
        {
            <h4>Loading ....</h4>
        }
        else
        {
            @foreach (var category in ProductCategoryItems.Data.ToList())
            {
                var categoryLink = "/productcategory/" + category.ProductCategoryId;
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="@categoryLink" @onclick="@(()=>HandleClick(categoryLink))" Match="NavLinkMatch.All">
                        <span class="oi oi-plus" aria-hidden="true"></span> @category.CategoryName
                    </NavLink>
                </div>
            }
        }

        

    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    [Inject]
    public NavigationManager? navMgr { get; set; } 




    [Inject]
    private IProductRepo? ProductRepo { get; set; }

    public ClientPayload<IEnumerable<ProductCategoryDto>> ProductCategoryItems { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var productCategoryItems = (ProductRepo == null) ? null : await ProductRepo.GetProductCategories();

        if (productCategoryItems != null)
        {
            ProductCategoryItems = productCategoryItems;
            // await InvokeAsync(StateHasChanged);

        }
    }

    private void HandleClick(string uri)
    {
        if (navMgr != null)
        {
          navMgr.NavigateTo(uri,true);
          
        }
    }

}
